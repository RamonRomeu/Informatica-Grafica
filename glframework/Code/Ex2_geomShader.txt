#version 330
layout(points) in;
layout(triangle_strip, max_vertices = 120) out;
out vec4 vert_g_normal;
uniform mat4 mv_Mat;
uniform mat4 mvp;
uniform float h;
uniform float cubeDiagonal;
uniform float movement;
vec4 vertex[48];

void createOctagon(int index, int prev1, int prev2, int pos1, int pos2) {
	vec4 face_normal = mv_Mat * vec4(normalize(cross(vertex[prev2].xyz-vertex[prev1].xyz, vertex[index].xyz-vertex[prev1].xyz)), 0);
	
	gl_Position = mvp * vertex[prev1];
	vert_g_normal = face_normal;
	EmitVertex();
	
	gl_Position = mvp * vertex[prev2];
	vert_g_normal = face_normal;
	EmitVertex();
	
	face_normal = mv_Mat * vec4(normalize(cross(vertex[index + 1].xyz-vertex[index].xyz, vertex[index + 2].xyz-vertex[index].xyz)), 0);
	for (int i = 0; i < 8; i++) {
		gl_Position = mvp * vertex[index + i];
		vert_g_normal = face_normal;
		EmitVertex();
	}
	
	face_normal = mv_Mat * vec4(normalize(cross(vertex[pos2].xyz-vertex[pos1].xyz, vertex[index + 7].xyz-vertex[pos1].xyz)), 0);
	
	gl_Position = mvp * vertex[pos1];
	vert_g_normal = face_normal;
	EmitVertex();
	
	gl_Position = mvp * vertex[pos2];
	vert_g_normal = face_normal;
	EmitVertex();
	
	EndPrimitive();
}; 

void createHexagon(int v1, int v2, int v3, int v4, int v5, int v6) {
	vec4 face_normal = mv_Mat * vec4(normalize(cross(vertex[v2].xyz-vertex[v1].xyz, vertex[v3].xyz-vertex[v1].xyz)), 0);
	vec4 centerVec[6];

	centerVec[0] = (vertex[v6]-vertex[v1]) / 2;
	centerVec[1] = (vertex[v5]-vertex[v2]) / 2;
	centerVec[2] = (vertex[v4]-vertex[v3]) / 2;
	centerVec[3] = -centerVec[2];
	centerVec[4] = -centerVec[1];
	centerVec[5] = -centerVec[0];

	vertex[v1] += movement * centerVec[0];
	gl_Position = mvp * vertex[v1];
	vert_g_normal = face_normal;
	EmitVertex();

	vertex[v2] += movement * centerVec[1];
	gl_Position = mvp * vertex[v2];
	vert_g_normal = face_normal;
	EmitVertex();

	vertex[v3] += movement * centerVec[2];
	gl_Position = mvp * vertex[v3];
	vert_g_normal = face_normal;
	EmitVertex();

	vertex[v4] += movement * centerVec[3];
	gl_Position = mvp * vertex[v4];
	vert_g_normal = face_normal;
	EmitVertex();

	vertex[v5] += movement * centerVec[4];
	gl_Position = mvp * vertex[v5];
	vert_g_normal = face_normal;
	EmitVertex();

	vertex[v6] += movement * centerVec[5];
	gl_Position = mvp * vertex[v6];
	vert_g_normal = face_normal;
	EmitVertex();

	EndPrimitive();
}

void main() {

	vertex[0] = gl_in[0].gl_Position + vec4(0, h, cubeDiagonal/2, 0);
	vertex[1] = vertex[0];
	vertex[2] = gl_in[0].gl_Position + vec4(-cubeDiagonal/2, h, 0, 0);
	vertex[3] = gl_in[0].gl_Position + vec4(cubeDiagonal/2, h, 0, 0);
	vertex[4] = vertex[2];
	vertex[5] = vertex[3];
	vertex[6] = gl_in[0].gl_Position + vec4(0, h, -cubeDiagonal/2, 0);
	vertex[7] = vertex[6];

	vertex[8] = gl_in[0].gl_Position + vec4(0, -h, cubeDiagonal/2, 0);
	vertex[9] = vertex[8];
	vertex[10] = gl_in[0].gl_Position + vec4(cubeDiagonal/2, -h, 0, 0);
	vertex[11] = gl_in[0].gl_Position + vec4(-cubeDiagonal/2, -h, 0, 0);
	vertex[12] = vertex[10];
	vertex[13] = vertex[11];
	vertex[14] = gl_in[0].gl_Position + vec4(0, -h, -cubeDiagonal/2, 0);
	vertex[15] = vertex[14];

	vertex[16] = gl_in[0].gl_Position + vec4(-h, -cubeDiagonal/2, 0, 0);
	vertex[17] = vertex[16];
	vertex[18] = gl_in[0].gl_Position + vec4(-h, 0, -cubeDiagonal/2, 0);
	vertex[19] = gl_in[0].gl_Position + vec4(-h, 0, cubeDiagonal/2, 0);
	vertex[20] = vertex[18];
	vertex[21] = vertex[19];
	vertex[22] = gl_in[0].gl_Position + vec4(-h, cubeDiagonal/2, 0, 0);
	vertex[23] = vertex[22];

	vertex[24] = gl_in[0].gl_Position + vec4(h, -cubeDiagonal/2, 0, 0);
	vertex[25] = vertex[24];
	vertex[26] = gl_in[0].gl_Position + vec4(h, 0, cubeDiagonal/2, 0);
	vertex[27] = gl_in[0].gl_Position + vec4(h, 0, -cubeDiagonal/2, 0);
	vertex[28] = vertex[26];
	vertex[29] = vertex[27];
	vertex[30] = gl_in[0].gl_Position + vec4(h, cubeDiagonal/2, 0, 0);
	vertex[31] = vertex[30];

	vertex[32] = gl_in[0].gl_Position + vec4(-cubeDiagonal/2, 0, h, 0);
	vertex[33] = vertex[32];
	vertex[34] = gl_in[0].gl_Position + vec4(0, cubeDiagonal/2, h, 0);
	vertex[35] = gl_in[0].gl_Position + vec4(0, -cubeDiagonal/2, h, 0);
	vertex[36] = vertex[34];
	vertex[37] = vertex[35];
	vertex[38] = gl_in[0].gl_Position + vec4(cubeDiagonal/2, 0, h, 0);
	vertex[39] = vertex[38];

	vertex[40] = gl_in[0].gl_Position + vec4(cubeDiagonal/2, 0, -h, 0);
	vertex[41] = vertex[40];
	vertex[42] = gl_in[0].gl_Position + vec4(0, cubeDiagonal/2, -h, 0);
	vertex[43] = gl_in[0].gl_Position + vec4(0, -cubeDiagonal/2, -h, 0);
	vertex[44] = vertex[42];
	vertex[45] = vertex[43];
	vertex[46] = gl_in[0].gl_Position + vec4(-cubeDiagonal/2, 0, -h, 0);
	vertex[47] = vertex[46];

	createHexagon(1, 36, 3, 38, 30, 28);
	createHexagon(0, 2, 34, 23, 32, 21);
	createHexagon(4, 6, 22, 44, 20, 46);//
	createHexagon(5, 31, 7, 29, 42, 40);//
	createHexagon(39, 37, 26, 8, 24, 10);
	createHexagon(33, 19, 35, 17, 9, 11);
	createHexagon(27, 25, 41, 12, 43, 14);//
	createHexagon(18, 47, 16, 45, 13, 15);//

	createOctagon(0, 34, 36, 44, 42);
	createOctagon(8, 37, 35, 43, 45);
	createOctagon(16, 13, 11, 4, 2);
	createOctagon(24, 10, 12, 3, 5);
	createOctagon(32, 21, 19, 28, 26);
	createOctagon(40, 29, 27, 20, 18);

	//createSquare(0, 34, 1, 36);
	//createSquare(8, 37, 9, 35);
	//createSquare(33, 32, 19, 21);
	//createSquare(38, 39, 28, 26);
	//createSquare(29, 27, 40, 41);
	//createSquare(46, 47, 20, 18);
	//createSquare(42, 44, 7, 6);
	//createSquare(45, 43, 15, 14);
	//createSquare(30, 31, 3, 5);
	//createSquare(22, 23, 4, 2);
	//createSquare(10, 12, 24, 25);
	//createSquare(13, 11, 16, 17);
}